{"version":3,"sources":["components/ui/Input/Input.js","components/ui/Input/Input.module.css","shared/validation.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","cssClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","onChange","changed","value","className","join","elementConfig","options","map","option","displayValue","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","Auth","state","isSignUp","controls","email","type","placeholder","validation","valid","password","inputChangedHandler","event","controlName","updatedControls","updateObject","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","e","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","id","config","form","formElement","loading","errorMessage","error","style","color","message","authRedirect","isAuthenticated","to","classes","onSubmit","clicked","Component","connect","auth","token","burgerBuilderReducer","building","dispatch","actions","path"],"mappings":"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","file":"static/js/4.1ffe29bc.chunk.js","sourcesContent":["import React from \"react\";\nimport cssClasses from \"./Input.module.css\";\n\nconst Input = (props) => {\n  let inputElement = null;\n  const inputClasses=[cssClasses.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched){\n    inputClasses.push(cssClasses.Invalid)\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          onChange={props.changed}\n          value={props.value}\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          onChange={props.changed}\n          value={props.value}\n          className={inputClasses.join(' ')}\n          {...props.elementConfig}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          onChange={props.changed}\n          value={props.value}\n          className={inputClasses.join(' ')}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          onChange={props.changed}\n          value={props.value}\n          className={cssClasses.InputElement}\n          {...props.elementConfig}\n        />\n      );\n  }\n  return (\n    <div className={cssClasses.Input}>\n      <label className={cssClasses.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__LtoHt\",\"Label\":\"Input_Label__P5ve3\",\"InputElement\":\"Input_InputElement__3FM1G\",\"Invalid\":\"Input_Invalid__cVEKK\"};","\r\nexport const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (!rules) {\r\n        return true;\r\n    }\r\n\r\n    if (rules.required) {\r\n        isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    if (rules.isNumeric) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__C7wiK\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Input from \"../../components/ui/Input/Input\";\nimport Button from \"../../components/ui/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\nimport Spinner from \"../../components/ui/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\nimport { updateObject } from \"../../shared/utility\";\nimport {checkValidity} from '../../shared/validation';\n\nclass Auth extends Component {\n  state = {\n    isSignUp: true,\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n  };\n\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n  };\n\n  switchAuthModeHandler = (e) => {\n    e.preventDefault();\n\n    this.setState((prevState) => {\n      return {\n        isSignUp: !prevState.isSignUp,\n      };\n    });\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath(\"/\");\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p style={{ color: \"red\" }}>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          <h1>{this.state.isSignUp ? \"SignUp\" : \"SignIn\"}</h1>\n          {form}\n          <Button type=\"Success\">Submit</Button>\n          <Button clicked={this.switchAuthModeHandler} type=\"Danger\">\n            Switch to {this.state.isSignUp ? \"SignIn\" : \"SignUp\"}{\" \"}\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token,\n    buildingBurger: state.burgerBuilderReducer.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: (path) =>\n      dispatch(actions.setAuthRedirectPath(path)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}