{"version":3,"sources":["containers/Orders/Order/Order.module.css","containers/Orders/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredientOutput","Object","entries","ingredients","map","name","amount","ingredient","style","display","margin","border","padding","className","cssClasses","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","orderReducer","auth","dispatch","actions","WithErrorHandler","axios"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,oHCoBXC,EAlBD,SAACC,GACX,IAIMC,EAJuBC,OAAOC,QAAQH,EAAMI,aAAaC,KAAI,yCAC/D,CAACC,KAD8D,KACxDC,OADwD,SAIrBF,KAAI,SAAAG,GAC9C,OAAO,uBAAMC,MAAO,CAACC,QAAS,eAAgBC,OAAQ,SAAUC,OAAQ,sBAAuBC,QAAS,OAAjG,UAAgIL,EAAWF,KAA3I,IAAkJE,EAAWD,OAA7J,OAA8GC,EAAWF,SAGhI,OACI,sBAAKQ,UAAWC,IAAWhB,MAA3B,UACI,8CAAiBE,KACjB,8CAAgB,mCAASD,EAAMgB,MAAMC,QAAQ,GAA7B,c,wCCN1BC,E,kLAEEC,KAAKnB,MAAMoB,cAAcD,KAAKnB,MAAMqB,MAAOF,KAAKnB,MAAMsB,U,+BAItD,IAAIC,EAAS,cAACC,EAAA,EAAD,IAehB,OAdQL,KAAKnB,MAAMyB,UACZF,EACI,8BAEQJ,KAAKnB,MAAMuB,OAAOlB,KAAI,SAAAqB,GAClB,OACI,cAAC,EAAD,CAAsBtB,YAAcsB,EAAMtB,YAAaY,MAAQU,EAAMV,OAAzDU,EAAMC,UAQtCJ,M,GArBSK,aA0CNC,uBAhBS,SAAAC,GACpB,MAAO,CACHP,OAAQO,EAAMC,aAAaR,OAC3BE,QAASK,EAAMC,aAAaN,QAC5BJ,MAAOS,EAAME,KAAKX,MAClBC,OAAQQ,EAAME,KAAKV,WAIA,SAAAW,GACvB,MAAO,CACHb,cAAe,SAACC,EAAOC,GAAR,OAAmBW,EAASC,IAAoBb,EAAOC,QAK/DO,CAA6CM,YAAiBjB,EAAQkB","file":"static/js/5.05c786dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2QSC3\"};","import React from \"react\";\r\nimport cssClasses from '../Order/Order.module.css'\r\n\r\nconst Order = (props) => {\r\n    const formattedIngredients = Object.entries(props.ingredients).map(([name, amount]) => (\r\n        {name, amount}\r\n    )) ;\r\n\r\n    const ingredientOutput = formattedIngredients.map(ingredient => {\r\n        return <span style={{display: 'inline-block', margin: '0 10px', border: '1px solid lightgrey', padding: '2px'}} key={ingredient.name}>{ingredient.name}({ingredient.amount}) </span>\r\n    });\r\n\r\n        return (\r\n            <div className={cssClasses.Order}>\r\n                <p>Ingredients: {ingredientOutput}</p>\r\n                <p>Total Price: <strong>{props.price.toFixed(2)}$</strong></p>\r\n            </div>\r\n            )\r\n\r\n};\r\n\r\nexport default Order\r\n","import React, { Component } from \"react\";\r\nimport Order from './Order/Order';\r\nimport axios from \"../../axios-orders\";\r\nimport WithErrorHandler from '../../hoc/withErrorHandler/WithErrorHandler';\r\nimport * as actions from '../../store/actions';\r\nimport {connect} from 'react-redux';\r\nimport Spinner from '../../components/ui/Spinner/Spinner';\r\n\r\n\r\nclass Orders extends Component{\r\n    componentDidMount() {\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders = <Spinner />;\r\n        if (!this.props.loading ){\r\n            orders = (\r\n                <div>\r\n                    {\r\n                        this.props.orders.map(order => {\r\n                            return (\r\n                                <Order key={order.id} ingredients ={order.ingredients} price ={order.price}/>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            );\r\n        }\r\n     return orders;\r\n}\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.orderReducer.orders,\r\n        loading: state.orderReducer.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId)),\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}